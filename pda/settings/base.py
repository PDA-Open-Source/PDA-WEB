"""
Django settings for PDA project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import os
from decouple import config
import mimetypes
mimetypes.add_type("text/css", ".css", True)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks',
    'qr_code',
    'core.apps.CoreConfig',
    'apps.authentication.apps.AuthenticationConfig',
    'apps.entity.apps.EntityConfig',
    'apps.program.apps.ProgramConfig',
    'apps.attestation.apps.AttestationConfig',
    'django_prometheus',
]

MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.authentication.middleware.PdaUserMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]

ROOT_URLCONF = 'pda.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django_settings_export.settings_export',
            ],
        },
    },
]

WSGI_APPLICATION = 'pda.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT'),
    },
    'session_db': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': config('SESSION_DB_NAME'),
        'USER': config('SESSION_DB_USER'),
        'PASSWORD': config('SESSION_DB_PASSWORD'),
        'HOST': config('SESSION_DB_HOST'),
        'PORT': config('SESSION_DB_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGIN_URL = '/oauth/login/'
ERROR_PAGE_URL = '/core/error/'

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = False

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
STATIC_ROOT = os.path.join(PROJECT_DIR, 'static')
STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# AWS Configuration Credentials
AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
AWS_REGION_NAME = config('AWS_REGION_NAME')

AWS_S3_CUSTOM_DOMAIN = AWS_STORAGE_BUCKET_NAME+'.s3.'+AWS_REGION_NAME+'.amazonaws.com'

AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None

AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
AWS_STATIC_URL = "https://%s/" % AWS_S3_CUSTOM_DOMAIN

FILE_UPLOAD_HANDLERS = [
    "django.core.files.uploadhandler.TemporaryFileUploadHandler",
]

# Session DataBase Configuration Credentials
SESSION_DB_NAME = config('SESSION_DB_NAME')
SESSION_DB_USER = config('SESSION_DB_USER')
SESSION_DB_PASSWORD = config('SESSION_DB_PASSWORD')
SESSION_DB_HOST = config('SESSION_DB_HOST')
SESSION_DB_PORT = config('SESSION_DB_PORT')

# Base URL
BASE_URL = config('BASE_URL')
PRIVACY_POLICY_URL = config('PRIVACY_POLICY_URL')
TERMS_AND_CONDITION_URL = config('TERMS_AND_CONDITION_URL')

SETTINGS_EXPORT = [
    'BASE_URL',
    'PRIVACY_POLICY_URL',
    'TERMS_AND_CONDITION_URL',
    'AWS_STORAGE_BUCKET_NAME',
    'AWS_STATIC_URL',
]

# For resolving issue when using collectstatic command.
PROMETHEUS_EXPORT_MIGRATIONS = False

# DATE FORMAT
DATE_INPUT_FORMATS = ['%d-%b-%Y']

# ROLES
PDA_SUPER_ADMIN = "Admin"
PDA_ENTITY_ADMIN = "ENTITY_ADMIN"
PDA_PROGRAM_ADMIN = "PROGRAM_ADMIN"
PDA_CONTENT_ADMIN = "CONTENT_ADMIN"
PDA_TRAINER = "TRAINER"

# Supported File Types
PDA_VIDEO_FORMAT = ('mp4', 'mpeg', 'flv', 'mov', 'MP4', 'MPEG', 'FLV', 'MOV')
PDA_IMAGE_FORMAT = ('jpeg', 'png', 'jpg', 'JPEG', 'PNG', 'JPG')
PDA_DOC_FORMAT = ('pdf', 'PDF')

# PERMISSIONS
ENTITY_PERMISSIONS = {
    "upload_entity_level_documents": True,
    "upload_program_level_documents": True,
    "can_activate_deactivate_entity": True,
    "can_edit_entity_profile": True,
    "can_edit_program": True,
    "can_add_activate_deactivate_entity_admin": True,
    "can_add_program_member": True,
    "can_activate_deactivate_program_member": True,
    "can_add_activate_deactivate_topic": True,
}

PROGRAM_PERMISSIONS = {
    "upload_entity_level_documents": False,
    "upload_program_level_documents": True,
    "can_activate_deactivate_entity": False,
    "can_edit_entity_profile": False,
    "can_edit_program": True,
    "can_add_activate_deactivate_entity_admin": False,
    "can_add_program_member": True,
    "can_activate_deactivate_program_member": True,
    "can_add_activate_deactivate_topic": True,
}

CONTENT_PERMISSIONS = {
    "upload_entity_level_documents": False,
    "upload_program_level_documents": False,
    "can_activate_deactivate_entity": False,
    "can_edit_entity_profile": False,
    "can_edit_program": False,
    "can_add_activate_deactivate_entity_admin": False,
    "can_add_program_member": False,
    "can_activate_deactivate_program_member": False,
    "can_add_activate_deactivate_topic": True,
}

TRAINER_PERMISSIONS = {
    "upload_entity_level_documents": False,
    "upload_program_level_documents": False,
    "can_activate_deactivate_entity": False,
    "can_edit_entity_profile": False,
    "can_edit_program": False,
    "can_add_activate_deactivate_entity_admin": False,
    "can_add_program_member": False,
    "can_activate_deactivate_program_member": False,
    "can_add_activate_deactivate_topic": False,
}

NOTIFICATION_TYPE = {
    "USER": "USER",
    "ATTESTATION": "ATTESTATION",
    "SESSION": "SESSION",
    "ATTENDANCE": "ATTENDANCE",
}
